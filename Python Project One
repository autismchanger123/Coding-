# Created  by Jimmy Strickland
# Loads data for both books and movies, returning a dictionary with two keys, 'books' and 'movies', one for
# each subset of the collection.
def load_collections():
    # Load the two collections.
    book_collection, max_book_id = load_collection("books.csv")
    movie_collection, max_movie_id = load_collection("movies.csv")

    # Check for error.
    if book_collection is None or movie_collection is None:
        return (None, None)

    # Return the composite dictionary.
    return {"books": book_collection, "movies": movie_collection}, max(max_book_id, max_movie_id)

# Loads a single collection and returns the data as a list.  Upon error, None is returned.
def load_collection(file_name):
    try:
        collection_file = open(file_name, "r")
        # Catch different types of errors
        # Each of the two except blocks below catches two
        # different types of errors.
    except FileNotFoundError:
        print("File not found when attempting to read", file_name)
        return (None, None)
    except IOError:
        print("Error in data file when reading", file_name)
        return (None, None)

    max_id = -1

    # Create an empty collection.
    collection = []

    # Open the file and read the field names
    field_names = collection_file.readline().rstrip().split(",")

    # Read the remaining lines, splitting on commas, and creating dictionaries (one for each item)
    for item in collection_file:
        field_values = item.rstrip().split(",")
        collection_item = {}
        for index in range(len(field_values)):
            if (field_names[index] == "Available") or (field_names[index] == "Copies") or (field_names[index] == "ID"):
                collection_item[field_names[index]] = int(field_values[index])
            else:
                collection_item[field_names[index]] = field_values[index]
        # Add the full item to the collection.
        collection.append(collection_item)
        # Update the max ID value
        max_id = max(max_id, collection_item["ID"])

    # Close the file now that we are done reading all of the lines.
    collection_file.close()

    # Return the collection.
    return collection, max_id

# Display the menu of commands and get user's selection.  Returns a string with  the user's executed command.
def prompt_user_with_menu():
    print("\n\n********** Welcome to the Collection Manager. **********")
    print("COMMAND    FUNCTION")
    print("  ci         Check in an item")
    print("  co         Check out an item")
    print("  ab         Add a new book")
    print("  am         Add a new movie")
    print("  db         Display books")
    print("  dm         Display movies")
    print("  qb         Query for books")
    print("  qm         Query for movies")
    print("  x          Exit")
    return input("Please enter a command to proceed: ")

# This is the main program function.  It runs the main loop which prompts the user and performs the requested actions.
def main():
    # Load the collections, and check for an error.
    library_collections, max_existing_id = load_collections()

    if library_collections is None:
        print("The collections could not be loaded. Exiting.")
        return
    print("The collections have loaded successfully.")

     # Display the error and get the operation code entered by the user.  We perform this continuously until the
    # user enters "x" to exit the program.  Calls the appropriate function that corresponds to the requested operation.
    operation = prompt_user_with_menu()
    while operation != "x":

        # Check in Function which is use for the ci input
        def check_in(library_collections):
           in_id = int(input("Enter the ID for the item you wish to check in:"))
           entire_collections = library_collections['books'] + library_collections['movies']


           for item in entire_collections:
               if item['ID'] != in_id:
                   continue
               elif item['Available'] < item['Copies']:
                   item['Available'] += 1
                   print('Your check in has succeeded')
                   print("ID:", item['ID'])
                   print("Title:", item['Title'])
                   if item in library_collections['books']:
                       print("Author:", item['Author'])
                       print("Publisher:", item['Publisher'])
                       print("Pages:", item['Pages'])
                       print("Years:", item['Year'])
                       print("Copies:", item['Copies'])
                       print("Available:", item['Available'])
                   elif item in library_collections['movies']:
                       print("Director:", item['Director'])
                       print("Length:", item['Length'])
                       print("Genre:", item['Genre'])
                       print("Years:", item['Year'])
                       print("Copies:", item['Copies'])
                       print("Available:", item['Available'])
                   return
               elif item['Available'] == item['Copies']:
                   print("All copies are already available, so this item can not be checked in.")
                   return
               else:
                   print("Not valid input!!!")

        # Check out function which is use for the co input
        def check_out(library_collections):
            out_id = int(input('Enter the ID for the item you wish to check out: '))
            entire_collections = library_collections['books'] + library_collections['movies']
            for item in entire_collections:
                if item['ID'] != out_id:
                    continue
                elif item['Available'] > 0:
                    item['Available'] -= 1
                    print('Your check out has succeeded.')
                    print('ID:',out_id)
                    print("Title:",item['Title'])
                    if item in library_collections['books'] :
                        print("Author:",item['Author'])
                        print("Publisher:",item['Publisher'])
                        print("Pages:",item['Pages'])
                        print("Years:",item['Year'])
                        print("Copies:",item['Copies'])
                        print("Available:",item['Available'])
                    elif item in library_collections['movies']:
                        print("Director:",item['Director'])
                        print("Length:",item['Length'])
                        print("Genre:",item['Genre'])
                        print("Years:",item['Year'])
                        print("Copies:",item['Copies'])
                        print("Available:",item['Available'])
                    return
                elif item['Available'] == 0:
                    print('No copies of the item are available for check out.')
                    return
                else:
                    print("Invalid input!")

        # Query_collection Function
        def query_collection(query_input):
            string_input = input("Enter a query string to use for the search:")
            for item in query_input:
                # This is use for the qb input!
                if (library_collections["books"] == query_input and (
                        string_input in item['Title'] or
                        string_input in item['Author'] or
                        string_input in item['Publisher'])):
                    print("ID:", item['ID'])
                    print("Title:",item['Title'])
                    print("Author:",item['Author'])
                    print("Publisher:",item['Publisher'])
                    print("Pages:", item['Pages'])
                    print("Year:", item['Year'])
                    print("Copies:", item['Copies'])
                    print("Available", item['Available'])
                    print("")
                # This is use for the qm input
                if (library_collections["movies"] == query_input and (
                        string_input in item['Title'] or
                        string_input in item['Director'] or
                        string_input in item['Genre'])):
                    print("ID:", item['ID'])
                    print("Title:", item['Title'])
                    print("Director:", item['Director'])
                    print("Length:", item['Length'])
                    print("Genre:", item['Genre'])
                    print("Year:", item['Year'])
                    print("Copies:", item['Copies'])
                    print("Available", item['Available'])
                    print("")

        # Add Book Function whichh is used for the ab input!
        def add_book(library_collections,max_existing_id):

            print("Please enter the following attributes for the new book.")
            collections_books = {}
            max_existing_id = max_existing_id + 1

            # Adding the book input
            collections_books['ID'] = max_existing_id
            collections_books['Title'] = input('Title:')
            collections_books['Author'] = input('Author:')
            collections_books['Publisher'] = input('Publisher:')
            collections_books['Pages'] = int(input('Pages:'))
            collections_books['Year'] = int(input('Year:'))
            collections_books['Copies'] = int(input('Copies:'))

            # Make sure copies equals the available
            collections_books['Available'] = collections_books['Copies']

            # Display what the user had enter!
            print("You have enter the following data:")
            print("Title:", collections_books['Title'])
            print("Author:",collections_books['Author'])
            print("Publisher:",collections_books['Publisher'])
            print("Pages:",collections_books['Pages'])
            print("Year:",collections_books['Year'])
            print("Copies:",collections_books['Copies'])
            print("Available:", collections_books['Copies'])
            cancel = input("Press enter to add this item to the collection. Enter 'x' to cancel.")
            if cancel =='x':
                print("These input had become cancel! ")
                return
            else:
                # Upload information
                library_collections.append(collections_books)
                return max_existing_id

        # Add Movie Function which is used for the am input!
        def add_movie(library_collections, max_existing_id):
            print("Please enter the following attributes for the new movie.")
            movie_collections= {}
            max_existing_id = max_existing_id + 1
            movie_collections['ID'] = max_existing_id
            movie_collections['Title'] = input('Title:')
            movie_collections['Director'] = input('Director:')
            movie_collections['Length'] = int(input('Length:'))
            movie_collections['Genre'] = input('Genre:')
            movie_collections['Year'] = int(input('Year:'))
            movie_collections['Copies'] = int(input('Copies:'))

            # TO make copies the same as available!
            movie_collections['Available'] = movie_collections['Copies']

            # Displayed what the user had enter!
            print("You have entered the following data:")
            print("Title:",movie_collections['Title'])
            print("Director:", movie_collections['Director'])
            print("Length:",movie_collections['Length'])
            print("Genre:",movie_collections['Genre'])
            print("Year:",movie_collections['Year'])
            print("Copies:",movie_collections['Copies'])
            print("Available:",movie_collections['Copies'])
            cancel = input("Press enter to add this item to the collection. Enter 'x' to cancel.")
            if cancel == 'x':
                print("These input had become cancel! ")
                return
            else:
                # Upload information
                library_collections.append(movie_collections)
                return max_existing_id

        def display_collection(library_input):
            # This is use for the db input!
            i = 0
            for item in library_input:
                if library_collections['books'] == library_input:
                    print("ID:", item['ID'])
                    print("Title:", item['Title'])
                    print("Author:", item['Author'])
                    print("Publisher:", item['Publisher'])
                    print("Pages:", item['Pages'])
                    print("Year:", item['Year'])
                    print("Copies:", item['Copies'])
                    print("Available", item['Available'])
                    print("")
                    i = i + 1
                    if  i == 10 or i == 20 or i == 30 or i == 40 or i == 50:
                        menu_input = input("Press enter to show more items, or type 'm' to return to the menu.")
                        if menu_input == 'm':
                            break
                # This is used for the dm input
                if library_collections['movies'] == library_input:
                    print("ID:", item['ID'])
                    print("Title:", item['Title'])
                    print("Director:", item['Director'])
                    print("Length:", item['Length'])
                    print("Genre:", item['Genre'])
                    print("Year:", item['Year'])
                    print("Copies:", item['Copies'])
                    print("Available", item['Available'])
                    print("")
                    i = i + 1
                    if i == 10 or i == 20 or i == 30 or i == 40 or i == 50:
                        menu_input = input("Press enter to show more items, or type 'm' to return to the menu.")
                        if menu_input == 'm':
                            break

        # The operation and the function that will be use!
        if operation == "ci":
            check_in(library_collections)
        elif operation == "co":
            check_out(library_collections)
        elif operation == "qb":
             query_collection(library_collections["books"])
        elif operation == "qm":
             query_collection(library_collections["movies"])
        elif operation == "ab":
             max_existing_id = add_book(library_collections["books"], max_existing_id)
        elif operation == "am":
             max_existing_id = add_movie(library_collections["movies"], max_existing_id)
        elif operation == "db":
             display_collection(library_collections["books"])
        elif operation == "dm":
             display_collection(library_collections["movies"])
        else:
         print("Unknown command.  Please try again.")

        operation = prompt_user_with_menu()

# Run the program
main()
